name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  lint:
    name: Lint (ESLint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm run lint

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm test

  build:
    name: Build & Archive Docker Image
    needs:
      - lint
      - unit_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - run: |
          docker build -t szyban/ci-cd-kolo:latest .
          docker save szyban/ci-cd-kolo:latest -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  deploy_staging:
    name: Deploy to Staging
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      - run: echo "Simulating deploy to staging..."

  deploy_production:
    name: Deploy to Production
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: deploy_staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: |
          docker load -i image.tar
          docker push szyban/ci-cd-kolo:latest

  final_report:
    name: Final Report
    if: ${{ always() }}
    needs:
      - build
      - deploy_staging
      - deploy_production
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "==== Pipeline Report ====" > raport.txt
          echo "Lint: ${{ needs.lint.result }}"       >> raport.txt
          echo "Unit Tests: ${{ needs.unit_tests.result }}" >> raport.txt
          echo "Build: ${{ needs.build.result }}"     >> raport.txt
          echo "Staging: ${{ needs.deploy_staging.result }}" >> raport.txt
          echo "Production: ${{ needs.deploy_production.result }}" >> raport.txt
      - uses: actions/upload-artifact@v4
        with:
          name: pipeline-report
          path: raport.txt
