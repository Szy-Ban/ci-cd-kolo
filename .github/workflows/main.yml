name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  lint:
    if: ${{ github.ref != 'refs/heads/main' }}
    name: Lint (ESLint)
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm run lint

  unit_tests:
    if: ${{ github.ref != 'refs/heads/main' }}
    name: Unit Tests
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm test

  build:
    name: Build & Archive Docker Image
    # uruchom, jeśli to main LUB (test i lint zakończone sukcesem)
    if: ${{ github.ref == 'refs/heads/main' || (needs.lint.result == 'success' && needs.unit_tests.result == 'success') }}
    needs:
      - lint
      - unit_tests
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - run: docker build -t szyban/ci-cd-kolo:latest .
      - run: docker save szyban/ci-cd-kolo:latest -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  deploy_staging:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Deploy to Staging
    runs-on: self-hosted
    needs: build
    environment:
      name: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      - run: |
          docker load -i image.tar
          echo ">>> Symulacja: obraz wdrożony na staging."

  deploy_production:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Deploy to Production
    runs-on: self-hosted
    needs: deploy_staging
    environment:
      name: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      - run: docker load -i image.tar
      - run: docker push szyban/ci-cd-kolo:latest

  final_report:
    name: Final Report
    if: ${{ always() }}
    runs-on: self-hosted
    needs:
      - build
      - deploy_staging
      - deploy_production
    steps:
      - run: |
          echo "==== Pipeline Report ====" > raport.txt
          echo "Lint: ${{ needs.lint.result || 'skipped' }}"       >> raport.txt
          echo "Tests: ${{ needs.unit_tests.result || 'skipped' }}" >> raport.txt
          echo "Build: ${{ needs.build.result || 'skipped' }}"     >> raport.txt
          echo "Staging: ${{ needs.deploy_staging.result }}"       >> raport.txt
          echo "Production: ${{ needs.deploy_production.result }}" >> raport.txt
      - uses: actions/upload-artifact@v4
        with:
          name: pipeline-report
          path: raport.txt
